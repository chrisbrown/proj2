                                     GRADER

Name of student running submit: Christopher Brown
Login of student running submit: cs61b-xy

Second team member's name: Kunwoo Hong
Second team member's login: cs61b-em

Third team member's name (if any): Sanket Padmanabhan
Third team member's login: cs61b-xz

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?


Have you tested your program on the 61B lab machines?


Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor (or is it a variable-depth search)?


Describe your board evaluation function in some detail.


Does your MachinePlayer use any special method of choosing the first few moves?


Is there anything else the graders should know to help them read your project?



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).  (If you're using a list class, that should probably count as
     a separate module.)
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's
     comments.

     Player.java
        public abstract Move chooseMove()
        public abstract boolean opponentMove()
        public abstract boolean forceMove()
     MachinePlayer.java
        public MachinePlayer(int color)
        /*A MachinePlayer constructor given the color of the piece.  Creates a MachinePlayer with a 
        specified searchDepth for determining moves*/
        
        public MachinePlayer(int color, int searchDepth)
        /*A MachinePlayer constructor given the color and a given searchDepth for determining moves */
        
        public Move chooseMove()
        
        
        public boolean opponentMove(Move m)
        public boolean forceMove(Move m)
        
     Move.java
        public Move(int x, int y)
        /*Construct an add move*/
        
        public Move(int xx1, int yy1, int xx2, int yy2)
        /*Construct a step move*/
        
        public String toString()
     Board.java
        public boolean isValidBoard()
        public boolean isValidNetwork(DList list)
        /*Checks to see if the given DList network is a valid network.  Checks each Node to make sure that each move 
        valid so that the network is a winning network*/
        
        public void makeMove(Move m)
        
        public void undo()
        
        public DList getNetworks(Node n)
 
     DList.java (for network)
        public DList(DListNode node)
        public void add(DListNode n)
        /*Adds a new DListNode to the current DList as a new piece is added to the network. (Front or end?) */
        
        public int size()
        /*Returns the size/length field of the current DList/number of Nodes in the network*/
        
        public boolean contains(Object num)
        /*Checks if the num Object is already used in the current DList*/
     DListNode.java (for board spaces, networks)
        public

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces will be worth 10% of your
grade.
