                                     GRADER

Name of student running submit: Christopher Brown
Login of student running submit: cs61b-xy

Second team member's name: Kunwoo Hong
Second team member's login: cs61b-em

Third team member's name (if any): Sanket Padmanabhan
Third team member's login: cs61b-xz

IMPORTANT:  Once you've submitted Project 2 once, the same team member should
submit always.  If a different teammate must submit, inform cs61b@cory.eecs of
all the details.  Include a complete list of team members, and let us know
which submission you want graded.

If you've submitted your project once, or even written a substantial amount of
code together, you may not change partners without the permission of the
instructor.
===============================================================================
Does your program compile without errors?


Have you tested your program on the 61B lab machines?


Did you successfully implement game tree search?  Did you successfully
implement alpha-beta pruning?  Are there any limitations on it?  What is the
default number of search levels set by the one-parameter MachinePlayer
constructor (or is it a variable-depth search)?


Describe your board evaluation function in some detail.


Does your MachinePlayer use any special method of choosing the first few moves?


Is there anything else the graders should know to help them read your project?



Describe the classes, modules, and interfaces you designed before and while you
implemented the project.  Your description should include:
  -  A list of the classes your program uses.
  -  A list of each of the "modules" used in or by MachinePlayer, similar to
     the list in the "Teamwork" section of the README (but hopefully more
     detailed).  (If you're using a list class, that should probably count as
     a separate module.)
  -  For each module, list the class(es) the module is implemented in.
  -  For each module, say which of your team members implemented it.
  -  For each module, describe its interface--specifically, the prototype and
     behavior of each method that is available for external callers (outside
     the module) to call.  Don't include methods that are only meant to be
     called from within the module.

     For each method, provide (1) a method prototype and (2) a complete,
     unambiguous description of the behavior of the method/module.  This
     description should also appear before the method in your code's
     comments.

  MODULES
-----------
  1. Determining valid move (Sanket)
     public boolean isValidMove(Move m)
     - Check (depending on player) if Move m is a valid move according
       to the given rules. Implement in Board, as all players have
       access to an instance of Board, and the validity depends on the
       current state.
  2. Generating list of valid moves. (Sanket)
     public DList validMoves(Player p)
     - Check for each possible move if it is a valid move. Implement
       in board.
  3. Finding chips that form connections with a given chip. (Kunwoo)
     public DList connections(int x, int y)
     - Cast out in each possible direction. If you hit a tile of
       opposite color, stop. Create DList where the nodes are the
       connected chips.
  4. Determining networks. (Chris)
     public boolean isValidNetwork(DList list)
     - Get each connected chip from the chips in the starting
       goal. For each following chip, get connected chips until you
       reach a node in the end goal. Check to make sure that newly
       added nodes have not been seen before- perhaps an alteration of
       the lockNode method.
  5. Evaluation function. (Chris)
     public int boardEval()
     - This one is harder- The network structure lends itself well to
       a graph- perhaps edge count would be a reasonable heuristic.
  6. Minimax. (Kunwoo)
     public Move chooseMove()
     - There are pseudocode implementations everywhere, but this will
       go in chooseMove.

     Player.java
        public abstract Move chooseMove()
        /*Returns a new Move by "this" player.  Internally records the move (updates the internal game board) as
        a move by "this" player */
        
        public abstract boolean opponentMove()
        /*If the Move m is legal, records the move as a move by the opponent                                              (updates the internal game board) and returns true.  If the move is                                               illegal, returns false without modifying the internal state of "this"                                             player.  This method allows your opponents to inform you of their moves. */

        public abstract boolean forceMove()
        /*If the Move m is legal, records the move as a move by "this" player                                             (updates the internal game board) and returns true.  If the move is                                               illegal, returns false without modifying the internal state of "this"                                             player.  This method is used to help set up "Network problems" for your                                           player to solve. */
        
     MachinePlayer.java
        public MachinePlayer(int color)
        /*A MachinePlayer constructor given the color of the piece (0 or 1).  Creates a MachinePlayer with a 
        predetermined searchDepth for determining moves*/
        
        public MachinePlayer(int color, int searchDepth)
        /*A MachinePlayer constructor given the color(0 or 1) and a given searchDepth for determining moves */
        
        public Move chooseMove()
        /*Returns a new Move by "this" player.  Internally records the move (updates the internal game board) as
        a move by "this" player*/
        
        private Best moveHelp(boolean side, int alpha, int beta)
        /*Returns a Best object that is the best option for the player (score and Move)*/
        
        public boolean opponentMove(Move m)
        /*If the Move m is legal, records the move as a move by the opponent                                              (updates the internal game board) and returns true.  If the move is                                               illegal, returns false without modifying the internal state of "this"                                             player.  This method allows your opponents to inform you of their moves. */

        public boolean forceMove(Move m)
        /*If the Move m is legal, records the move as a move by "this" player   (updates the internal game board) and returns true.  If the move is                                               illegal, returns false without modifying the internal state of "this"                                             player.  This method is used to help set up "Network problems" for your                                           player to solve. */
        
        
        
     Move.java
        public Move(int x, int y)
        /*Construct an add move*/
        
        public Move(int xx1, int yy1, int xx2, int yy2)
        /*Construct a step move*/
        
        public String toString()
        /*A String representation of every mnove made*/
        
     Best.java
        public int score()
        /*Returns the score*/
        public Move move()
        /*Returns the move*/
        
     Board.java
        public boolean isValidMove(Move m)
        /*Determines if the Move m is a playable move that does not break any rules*/ 
        
        public boolean isValidNetwork(DList list)
        /*Checks to see if the given DList network is a valid network.  Checks each Node to make sure that each move was 
        valid so that the network is a winning network*/
        
        public DList validMoves(Player p)
        /*Returns a DList of all valid moves*/
        
        public void makeMove(Move m, int color)
        /*Adds the input Move m onto the current board.  Acts as a board update for each player that adds
        a Move to the board */
        
        public void undo()
        /*Removes the last Move made on the current Board*/
        
        public DList getNetworks(Node n)
        /*Returns a DList of the network that contains the input Node n.*/
        
        public int boardEval()
        /*Returns the number assigned to evaluate the "score" of the board for determining if the move
        is benefitial to the player*/
        
 
     DList.java //for network
        protected DListNode newNode(Object num, DList list, DListNode prev, DListNode next)
        /*Calls the DListNode constructor*/
        
        public DList()
        /*Constructs an empty DList with a sentinel*/
        
        public void insertFront(Object num)
        /*Inserts a new DListNode with Object num to the front of current DList*/
        
        public void insertEnd(Object num)
        /*Inserts a new DListNode with Object num to the end of current DList*/
        
        public DListNode front()
        /*Returns the DListNode at the front of the current DList*/
        
        public DListNode back()
        /*Returns the DListNode at the back of the current Dlist*/
        
        public int size()
        /*Returns the size/length field of the current DList/number of Nodes in the network*/
        
        public boolean contains(Object num)
        /*Checks if the num Object is already used in the current DList based on the item of the DListNodes*/
        
     DListNode.java (for board spaces, networks)
        public DListNode(Object num, DList myList, DListNode next, DListNode prev)
        /*DListNode constructor that takes in an Object num as the color, DList myList as a pointer to the DList
        to which the DListNode belongs, DListNode next as a pointer to the next DListNode in the network, and
        DListNode prev as a pointer to the previous DListNode in the network*/
        
        public DListNode next()
        /*Returns the DListNode following the current DListNode*/
        
        public DListNode prev()
        /*Returns the DListNode prior to the current DListNode*/
        
        public void insertAfter(Object num)
        /*Inserts a DListNode of Object num immediately following the current DListNode*/
        
        public void insertBefore(Object num)
        /*Inserts a DListNode of Object num immediately before the current DListNode*/
        
        public void remove()
        /*Removes the current DListNode from its respective Dlist (removes this piece from the network)*/
        
        

You will probably need to change some of your design decisions as you go; be
sure to modify this file to reflect these changes before you submit your
project.  Your design of classes and interfaces will be worth 10% of your
grade.
